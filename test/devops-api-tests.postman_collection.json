{
	"info": {
		"_postman_id": "7a31bfe7-c79f-45de-b9a4-8f9e1d7d21a8",
		"name": "DevOps API Tests",
		"description": "Documentation for MISW DevOps project API - Entrega 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38911504"
	},
	"item": [
		{
			"name": "Get API Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();",
							"",
							"pm.collectionVariables.set(\"accessToken\", response.access_token);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/get-token",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"get-token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reset database",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/clear-blacklist",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"clear-blacklist"
					]
				},
				"description": "Clean the database"
			},
			"response": [
				{
					"name": "Reset database",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/reset",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reset"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 16:32:11 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "43"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"msg\": \"Todos los datos fueron eliminados\"\n}"
				}
			]
		},
		{
			"name": "Add email to blacklist - No token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response body has the required field 'msg'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('msg');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/blacklists",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"blacklists"
					]
				},
				"description": "Error if a request does not contain an authorization token"
			},
			"response": [
				{
					"name": "Add email to blacklist - No token",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/blacklists",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blacklists"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 17:05:34 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"msg\": \"Not authorized\"\n}"
				}
			]
		},
		{
			"name": "Add email to blacklist - Invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 422\", function () {",
							"  pm.expect(pm.response.code).to.equal(422);",
							"});",
							"",
							"",
							"pm.test(\"Response body has the required field 'msg'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('msg');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "wrong-token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/blacklists",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"blacklists"
					]
				},
				"description": "Error if a request does not contain an authorization token"
			},
			"response": [
				{
					"name": "Add email to blacklist - No token",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/blacklists",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blacklists"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 17:05:34 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"msg\": \"Not authorized\"\n}"
				}
			]
		},
		{
			"name": "Add email to blacklist - Wrong body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"\",\n    \"blocked_reason\": \"\",\n    \"app_uuid\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/blacklists",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"blacklists"
					]
				},
				"description": "Error if a request does not contain the right fields"
			},
			"response": [
				{
					"name": "Add email to blacklist - Wrong body",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"\",\n    \"blocked_reason\": \"\",\n    \"app_uuid\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/blacklists",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blacklists"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 17:16:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"msg\": \"Invalid request body\"\n}"
				}
			]
		},
		{
			"name": "Add email to blacklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var request = JSON.parse(pm.request.body.raw);",
							"",
							"pm.collectionVariables.set(\"blacklistedEmail\", request.email);",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"        const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"blocked_reason\": \"{{$randomPhrase}}\",\n    \"app_uuid\": \"{{$guid}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/blacklists",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"blacklists"
					]
				},
				"description": "Add an email to blacklist with a Bearer token"
			},
			"response": [
				{
					"name": "Add email to blacklist",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/blacklists",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blacklists"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 16:32:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "191"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"email\": \"spam@domain.com\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"ip_address\": \"172.31.23.226\",\n    \"createdAt\": \"2024-10-20T16:32:14.065246\"\n}"
				}
			]
		},
		{
			"name": "Get blacklisted email - No token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.msg).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/blacklists/{{blacklistedEmail}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"blacklists",
						"{{blacklistedEmail}}"
					]
				},
				"description": "Error if a request does not contain an authorization token"
			},
			"response": [
				{
					"name": "Get blacklisted email - No token",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/blacklists/spam@domain.com",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blacklists",
								"spam@domain.com"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 17:12:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Connection",
							"value": "close"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"msg\": \"Not authorized\"\n}"
				}
			]
		},
		{
			"name": "Get blacklisted email - Invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 422\", function () {",
							"  pm.expect(pm.response.code).to.equal(422);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.msg).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "invalid-token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/blacklists/{{blacklistedEmail}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"blacklists",
						"{{blacklistedEmail}}"
					]
				},
				"description": "Error if a request does not contain an authorization token"
			},
			"response": [
				{
					"name": "Get blacklisted email - No token",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/blacklists/spam@domain.com",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blacklists",
								"spam@domain.com"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 17:12:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Connection",
							"value": "close"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"msg\": \"Not authorized\"\n}"
				}
			]
		},
		{
			"name": "Get blacklisted email - Unexistent email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - is_blacklisted\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('is_blacklisted');",
							"});",
							"",
							"",
							"pm.test(\"Is_present is a boolean - false\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.is_blacklisted).to.be.false;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/blacklists/unexistent@none.com",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"blacklists",
						"unexistent@none.com"
					]
				},
				"description": "When an email is note registered, get a flase response in the is_present flag, and an empty blocked reason"
			},
			"response": [
				{
					"name": "Get blacklisted email - Unexistent email",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/blacklists/unexistent@none.com",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blacklists",
								"unexistent@none.com"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 17:13:01 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "40"
						},
						{
							"key": "Connection",
							"value": "close"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"is_present\": false,\n    \"blocked_reason\": \"\"\n}"
				}
			]
		},
		{
			"name": "Get blacklisted email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.is_blacklisted).to.exist.and.to.be.true;",
							"    pm.expect(responseData.reason).to.exist;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/blacklists/{{blacklistedEmail}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"blacklists",
						"{{blacklistedEmail}}"
					]
				},
				"description": "When the email is blacklisted, get the true is_present flag and a blocked reason"
			},
			"response": [
				{
					"name": "Get blacklisted email",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"spam@domain.com\",\n    \"blocked_reason\": \"It says spam in the name\",\n    \"app_uuid\": \"64ccbf79-2b65-4b7c-8f3a-f414ce5b9429\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}/blacklists/spam@domain.com",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blacklists",
								"spam@domain.com"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 16:32:17 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "63"
						},
						{
							"key": "Connection",
							"value": "close"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"is_present\": true,\n    \"blocked_reason\": \"It says spam in the name\"\n}"
				}
			]
		},
		{
			"name": "Get app version",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/version",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"version"
					]
				},
				"description": "This is an administrative endpoint that shows the app version (hardcoded), and the hostname that responds to the request"
			},
			"response": [
				{
					"name": "Get server information",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}/server",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"server"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 20 Oct 2024 17:54:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "79"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						}
					],
					"cookie": [],
					"body": "{\n    \"hostname\": \"ip-172-31-21-115.us-east-2.compute.internal\",\n    \"app-version\": \"v1-2\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "127.0.0.1:8080",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "blacklistedEmail",
			"value": ""
		}
	]
}